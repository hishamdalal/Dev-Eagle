@charset 'utf-8';

@use 'sass:color';

//@use './index.scss';
@use '../vendors';
@use './Init'; 
@use './Library/Breakpoints';
@use './Library/Breakpoints/debug';
@use './Layouts';
@use './Layouts/Responsive' as RLayouts;
@use './Library/Fonts';
@use './Library/Fonts/responsive' as rFonts;
@use './Library/Colors';
@use './Library/Animations';
@use './Library/Spacing';
@use './Library/Spacing/Responsive' as rSpacing;
@use './Library/Images';
//@use './Library/Spacing/Responsive/Auto' as arSpacing;

@use './Components/Buttons';
//@use './Components/Buttons/Group';
@use './Components/BackToTop';
@use './Components/Cards';
@use './Components/Accordion';
@use './Components/Badge';
@use './Components/Tabs';
@use './Components/Breadcrumb';
@use './Components/grouping';
@use './Components/Details';
@use './Components/Borders';
//@use './Components/Slider';
@use '../CustomComponents';

@use './Forms';
@use './Forms/Responsive';



// Todo: Add rtl support -> x-inline-start, x-inline-end
// todo: Add common css like: .txt-mute, .cursor-pointer, ...ets  

// @include debug.print();

html {
	//@include Fonts.size(p); 
	@include rFonts.size-map($xxxs:.8, $sm:.9, $md:1, $xl:1.2);
	@include Fonts.family(hero);
}

section {
	@include Spacing.padding($all:1);
}

.main-header {
	@include Colors.bg(primary);
	@include Spacing.padding($h:1, $v:.5);
	@include rSpacing.padding($md:(h:1.5), $lg:(h:2) );
}

.main-nav {
	display: grid;
	grid-auto-flow: row;
	align-items: center;
	gap: 1rem;

	@include Breakpoints.equal-or-less(xxs) {
		justify-self: center;
		text-align: center;
		padding-top: 3rem;
	}
	@include Breakpoints.more-than(xxs) {
		grid-auto-flow: column;
		grid-template-columns: 3rem auto 5rem;
	}
	@include Breakpoints.more-than(sm) {
		grid-template-columns: 4rem auto 5rem;
	}
    

	.logo {
		img {
			width: 100%;
			aspect-ratio: 1/1;

			@include Breakpoints.equal-or-less(xxs) {
				width: 50%;
			}
		}
	}

	.controls {
		display: flex;
		gap: 1rem;
		justify-content: center;
		z-index: 9999;

		@include Breakpoints.equal-or-less(xxs) {
			position: absolute;
			top: 1rem;
			place-self: center;
			width: 100%;
			justify-content: space-between;
			padding-inline: 1rem;
		}
	}
}

.site-name-wrapper {
	.site-name {
		@include Fonts.size(h3);
	}
	.site-desc {
		@include Fonts.size(xsmall);
	}
}

.mode-switch {
    @include Colors.bg(dark);
    display: flex;
    align-items: center;
    justify-content: center;
    height: 2rem;
    width: 2rem;
    padding: .2rem;
    border-radius: 50%;
    cursor: pointer;
}

.nav-list {
	position: absolute;
	inset-inline-start: 0;
	top: 0;
	width: 100%;
	width: 100vw;
	// i use javascript to make height = page height
	height: 100%;
	height: 100vh;
	//height: 100vmax;
	//height: 100dvh;
	@include Colors.bg(accent);
	list-style: none;
	margin: 0;
	padding: 0 3rem;
	z-index: 999;
	
	display: grid;
	grid-auto-flow: row;
	gap: 1rem;
	align-content: baseline;
	@include rSpacing.padding($xxxs:(t:4), $xxs:(t:6), $sm:(t:12), $lg:(t:17));
	text-align: center;

	@include Breakpoints.more-than(xxs) {
		grid-auto-flow: column;
	}

	@include Animations.transition(ease-in-out, 300ms, 0, opacity, visibility);

	li {
		display: grid;
	}
	a{
		@include Colors.txt(dark, (darken:7));	
		@include Spacing.padding($v:2);

		&:hover {
			@include Colors.txt(light, (lighten:9));
			@include Colors.shadow(light, 0, 0, 9px, (lighten:9));	
			@include Colors.stroke(light, (lighten:4));
			//@include Colors.stroke2(light, 2);
		
		}
	}
}

[data-visible="false"] {
	opacity: 0;
	visibility: hidden;

}
[data-visible="true"] {
	opacity: 1;
	visibility: visible;
}

.nav-toggle {

	@include Colors.txt(light, (lighten:4));
    right: 1rem;
    top: 1rem;
	width: 1.6rem;
    aspect-ratio: 1;
	
	cursor: pointer;
	display: flex;
    place-content: center;
    align-self: center;
	justify-self: flex-end;
	@include Colors.replace(border, '1px solid $', (light), (lighten:4));
	border-radius: .2rem;

	
	&::after {
		content: "\f0c9";
		font-family: fontAwesome;
	}

	&.show, &:hover {
		@include Colors.txt(dark, (darken:4));
		@include Colors.replace(border, '1px solid $', (dark), (darken:4));
	}
	&.show {
		&:hover {
			@include Colors.txt(light, (lighten:4));
			@include Colors.replace(border, '1px solid $', (light), (lighten:4));
		}
		
		&::after {
			content: "\f00d";
		}
	}
}

.jumpetron {
	height: 15rem;
	@include Colors.bg(gray, (lighten:4));
}

#alert {
	// bg-color: 
	// 	-> 1st line for background color in normal state
	//  -> 2nd line for background color in hover state
    @include Buttons.btn($hover:( 
    	( background-color: Colors.get(secondary, (lighten:3)) ), 
        ( background-color: Colors.get(secondary, (lighten:3), true) ) 
    ));

}

.badge-example {
	padding: 2rem;
	
}

.dropdown-button:focus-within > .dropdown-toggle {
	@include Colors.txt(light);
}

.dropdown-button {
	.dropdown-menu {
		a {
			@include Colors.txt(primary);
			&:hover {
				@include Colors.txt(primary, (darken:-1));
			}
		}
	}
}

body > footer {
	@include Spacing.padding($v:2);
	@include Colors.txtBg(light, dark);
	text-align: center;
}