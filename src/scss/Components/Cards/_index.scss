@use '../../Layouts';
@use '../../Library/Breakpoints';
@use '../../Library/Colors';
@use '../../Settings/buttons' as settings;
@use '../../Library/Spacing';
@use '../../Library/Fonts';
@use '../../Settings/Options';
@use '../Buttons/mixins' as Buttons;


//@use '../../Settings/colors' as base-colors;


@if Options.deep-get('components', 'Cards', 'classes') {

    .h-cards {
        display: grid;
        
        @include Breakpoints.for-sizes(xs, sm){
            width: 80%;
        }
        @include Breakpoints.for-sizes(md, lg){
            width: 70%;
        }
        @include Breakpoints.equal-or-more(lg){
            @include Layouts.grid-h();
            width: 60%;
        }
        @include Spacing.padding($all:2);
        justify-content: center;
        gap: 1.4rem;
        margin: auto;
        

        .card {
            display: grid;

            @include Breakpoints.less-than(lg){
                //@include Layouts.grid-cols(11rem auto 2.5rem);
                grid-template-areas: "header body" "header body" "header footer";
                @include Layouts.grid-cols(2fr 3fr);
            }
            @include Breakpoints.equal-or-more(lg){
                @include Layouts.grid-rows(11rem auto 2.5rem);
                grid-template-areas: "header" "body" "footer";
            }
            
            @include Colors.shadow2(box, primary, (lighten:4), 1, 6);
            @include Colors.replace(outline, '1px solid $', (dark), (darken:3));
            border-radius: .7rem;
            overflow: hidden;


            header {
                grid-area: header;
                &>img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                }
            }
            .body {
                grid-area: body;
                display: flex;
                flex-direction: column;

                &>.title {
                    @include Spacing.padding($v:.5);
                    @include Fonts.size(h5);
                    @include Fonts.weight(bold);
                }
                @include Spacing.padding($h:1.2, $v:1);

                &>.meta {
                    display: flex;
                    align-self: flex-end;
                    @include Spacing.padding($v:.2);
                    @include Fonts.size(xsmall);
                    @include Colors.txt(gray);
                }

            }
            footer {
                grid-area: footer;
                @include Layouts.flex-h();
                justify-content: space-between;
                align-items: center;
                @include Colors.txtBg(light, secondary, (lighten:5), (darken:1));
                @include Spacing.padding($h:1.2, $v:.5);
                @include Fonts.size(small);

            }

            .btn {
                justify-self: flex-end;
                
                $color: Colors.get(light, (lighten:3) );
                $vcolor: Colors.get(light, (lighten:3), true);

                @include Buttons.btn($hover:( 
                    (border: 1px solid $color), 
                    (border: 1px solid $vcolor) 
                ));

                @include Colors.txtBg(light, tertiary, (lighten:3), (darken:3) );
                //@include Colors.replace(border, '1px solid $', (dark), (lighten:9));
                

                &:hover {
                    @include Colors.txtBg(tertiary, light, (darken:4), (lighten:4) );
                }
                &:active {
                    @include Colors.txtBg(tertiary, light, (darken:3), (lighten:3) );
                }
            }
        }
    }
}
